{"version":3,"sources":["mysteries.js","App.js","serviceWorker.js","index.js"],"names":["mysteries","Letter","props","nameOfClass","clicked","react_default","a","createElement","className","onClick","letter","Alphabet","index","_this","this","rows","alphabet","numOfRows","length","i","row","j","push","newLetter","Component","Lives","lives","Answer","current","generateMystery","Math","floor","random","newMystery","category","blank","is","Array","fill","allLetters","Refresh","App","_this2","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","mystery","finished","allTrueClicked","clickHandler","bind","assertThisInitialized","stat","p","setState","document","location","reload","firstStatus","_this3","refreshHandler","App_Alphabet","Boolean","window","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6748d13d.chunk.js","sourcesContent":["const mysteries = [['STEFAN ŻEROMSKI', 'pisarze'],\r\n['LEONARDO DA VINCI', 'wynalazcy'],\r\n['GRANICA', 'pojęcia'],\r\n['TWIERDZENIE PITAGORASA', 'matematyka'],\r\n['TO BE OR NOT TO BE', 'cytaty'],\r\n['CORN FLAKES', 'jedzenie'],\r\n['SUPERMAN', 'komiksy'],\r\n['ŻALUZJE', 'przedmioty'],\r\n['WODA MINERALNA', 'napoje'],\r\n['IRON MAN', 'komiksy'],\r\n['DISCO POLO', 'muzyka'],\r\n['BIBLIA', 'religia'],\r\n['THOMAS EDISON', 'wynalazcy'],\r\n['FORREST GUMP', 'film']\r\n];\r\n\r\nexport default mysteries;","import React, { Component } from 'react';\nimport './App.css';\nimport mysteries from './mysteries.js';\n\nfunction Letter(props)\n{\n\tlet nameOfClass;\n\tif(props.clicked === true)\n\t{\n\t\tnameOfClass = 'LetterClicked';\n\t}\n\telse\n\t{\n\t\tnameOfClass = 'LetterUnclicked';\n\t}\n\t\n\treturn (\n\t\t<button className={nameOfClass} onClick={props.onClick}>\n\t\t\t{props.letter}\n\t\t</button>\n\t);\n}\n\nclass Alphabet extends Component\n{\n\tnewLetter(index)\n\t{\n\t\tlet alphabet = 'AĄBCĆDEĘFGHIJKLŁMNŃOÓPQRSŚTUWVXYZŹŻ';\n\t\treturn (\n\t\t\t<Letter \n\t\t\t\tletter={alphabet[index]} \n\t\t\t\tonClick={()=>{this.props.onClick(index)}} \n\t\t\t\tclicked={this.props.clicked[index]} \n\t\t\t/>\n\t\t);\n\t}\n\t\n\trender()\n\t{\n\t\tlet rows = [];\n\t\tlet alphabet = 'AĄBCĆDEĘFGHIJKLŁMNŃOÓPQRSŚTUWVXYZŹŻ';\n\t\tlet numOfRows = alphabet.length / 5;\n\t\tif(alphabet.length > 0)\n\t\t{\n\t\t\tnumOfRows++;\n\t\t}\n\t\tfor(let i = 0; i < numOfRows; i++)\n\t\t{\n\t\t\tlet row = [];\n\t\t\tfor(let j = 0; j < 5; j++)\n\t\t\t{\n\t\t\t\tif(5*i+j < alphabet.length)\n\t\t\t\t{\n\t\t\t\t\trow.push(this.newLetter(5*i+j));\n\t\t\t\t}\n\t\t\t}\n\t\t\trows.push(<div className=\"rowOfAlphabet\">{row}</div>);\n\t\t}\n\t\treturn (\n\t\t\t<div className=\"Alphabet\">\n\t\t\t\t{rows}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nfunction Lives(props)\n{\n\treturn (\n\t\t<div className=\"Lives\">\n\t\t\t{props.lives}\n\t\t</div>\n\t);\n}\n\nfunction Answer(props)\n{\n\treturn (\n\t\t<div className=\"Answer\">\n\t\t\t{props.current}\n\t\t</div>\n\t);\n}\n\nfunction generateMystery()\n{\n\tlet index = Math.floor(Math.random()*mysteries.length);\n\tlet newMystery = mysteries[index][0];\n\tlet category = mysteries[index][1];\n\t\n\tlet blank = \"\";\n\tfor(let i = 0; i < newMystery.length; i++)\n\t{\n\t\tif(newMystery[i] !== \" \")\n\t\t{\n\t\t\tblank += \"*\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\tblank += \" \";\n\t\t}\n\t}\n\t\n\tlet alphabet = 'AĄBCĆDEĘFGHIJKLŁMNŃOÓPQRSŚTUWVXYZŹŻ';\n\tlet is = Array(35).fill(false);\n\tlet allLetters = 0;\n\tfor(let i = 0; i < 35; i++)\n\t{\n\t\tfor(let j = 0; j < newMystery.length; j++)\n\t\t{\n\t\t\tif(newMystery[j] === alphabet[i])\n\t\t\t{\n\t\t\t\tis[i] = true;\n\t\t\t\tallLetters++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlet wynik = [newMystery, blank, is, allLetters, category];\n\treturn wynik;\n}\n\nfunction Refresh(props)\n{\n\treturn (\n\t\t<button className=\"refresh\" onClick={props.onClick}>\n\t\t\tNowa gra\n\t\t</button>\n\t);\n}\n\nclass App extends Component {\n\tconstructor(props)\n\t{\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tlives: 5,\n\t\t\tmystery: generateMystery(),\n\t\t\tclicked: Array(35).fill(false),\n\t\t\tfinished: false,\n\t\t\tallTrueClicked: 0,\n\t\t};\n\t\tthis.clickHandler = this.clickHandler.bind(this);\n\t}\n\t\n\tclickHandler(i)\n\t{\n\t\tlet alphabet = 'AĄBCĆDEĘFGHIJKLŁMNŃOÓPQRSŚTUWVXYZŹŻ';\n\t\tlet clicked = this.state.clicked;\n\t\tlet mystery = this.state.mystery;\n\t\tlet lives = this.state.lives;\n\t\tlet finished = this.state.finished;\n\t\tlet stat = this.state.stat;\n\t\tlet allTrueClicked = this.state.allTrueClicked;\n\t\t\n\t\tif(clicked[i] === true || finished === true)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tclicked[i] = true;\n\t\t\n\t\tif(mystery[2][i] === false)\n\t\t{\n\t\t\tlives--;\n\t\t\tif(lives === 0)\n\t\t\t{\n\t\t\t\tfinished = true;\n\t\t\t\tstat = 'Niestety, ale przegrałeś';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tallTrueClicked++;\n\t\t\tlet blank = '';\n\t\t\tfor(let p = 0; p < mystery[0].length; p++)\n\t\t\t{\n\t\t\t\tif(alphabet[i] === mystery[0][p])\n\t\t\t\t{\n\t\t\t\t\tblank += alphabet[i]\n\t\t\t\t}\n\t\t\t\telse if(mystery[1][p] !== '*')\n\t\t\t\t{\n\t\t\t\t\tblank += mystery[1][p];\n\t\t\t\t}\n\t\t\t\telse if(mystery[0][p] !== ' ')\n\t\t\t\t{\n\t\t\t\t\tblank += '*';\n\t\t\t\t}\n\t\t\t}\n\t\t\tmystery[1] = blank;\n\t\t\tif(allTrueClicked === mystery[3])\n\t\t\t{\n\t\t\t\tfinished = true;\n\t\t\t\tstat = 'Brawo! Wygrałeś!'\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.setState({\n\t\t\tclicked: clicked,\n\t\t\tmystery: mystery,\n\t\t\tlives: lives,\n\t\t\tfinished: finished,\n\t\t\tallTrueClicked: allTrueClicked,\n\t\t\tstat: stat,\n\t\t});\n\t}\n\t\n\t\n\trefreshHandler()\n\t{\n\t\tdocument.location.reload();\n\t}\n\t\n\tcomponentDidMount()\n\t{\n\t\tconst firstStatus = 'Kategoria: ' + this.state.mystery[4];\n\t\tthis.setState({\n\t\t\tstat: firstStatus,\n\t\t});\n\t}\n\t\n  render() {\n\t  if(this)\n    return (\n      <div className=\"App\">\n\t\t<div className=\"left\">\n\t\t\t<Lives lives={this.state.lives} />\n\t\t\t<Refresh onClick={this.refreshHandler} />\n\t\t\t<Alphabet \n\t\t\t\tonClick={(i)=>{this.clickHandler(i)}} \n\t\t\t\tclicked={this.state.clicked} \n\t\t\t/>\n\t\t</div>\n\t\t<div className=\"right\">\n\t\t\t<div className=\"status\">\n\t\t\t\t{this.state.stat}\n\t\t\t</div>\n\t\t\t<Answer current={this.state.mystery[1]} />\n\t\t</div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}